services:
  postgres:
    container_name: postgres
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: chatbot
      POSTGRES_USER: chatbot
      POSTGRES_PASSWORD: chatbot
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatbot -d chatbot"]
      interval: 5s
      timeout: 5s
      retries: 20

  app:
    container_name: app
    build:
      context: .
      dockerfile: Dockerfile.app
      platforms:
        - linux/amd64
        - linux/arm64
    image: chatbot-basic-app:local
    working_dir: /app
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_JSON: ${LOG_JSON:-1}
      OPENAI_TELEMETRY_DISABLED: "1"
      OPENAI_TRACING_DISABLED: "1"
      # Optional hosted/alt profiles
      MISTRAL_API_KEY: ${MISTRAL_API_KEY}
      DEFAULT_MODEL_PROFILE: ${DEFAULT_MODEL_PROFILE:-openai-gpt5}
      # Optional local model runner profile
      LOCAL_API_KEY: ${LOCAL_API_KEY}
      LOCAL_BASE_URL: ${LOCAL_BASE_URL:-http://host.docker.internal:8080/v1}
      DATABASE_URL: postgresql+psycopg://chatbot:chatbot@postgres:5432/chatbot
      DOCS_DIR: /app/docs
      DATA_DIR: /app/data
      FRONTEND_DIR: /app/frontend
      MCP_DOCS_URL: http://mcp-docs:3000
      MCP_SQL_URL: http://mcp-sql:3000
      UV_LINK_MODE: copy
    depends_on:
      postgres:
        condition: service_healthy
      mcp-docs:
        condition: service_healthy
      mcp-sql:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-lc"]
    command: ["uv run --python 3.13 python /app/main.py"]
    ports:
      - "8000:8000"
    models:
      - chat_local
      - embed_local

  mcp-docs:
    container_name: mcp-docs
    build:
      context: ./mcp/docs
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    image: chatbot-basic-mcp-docs:local
    working_dir: /srv
    volumes:
      - ./docs:/srv/corpus
    environment:
      CORPUS_DIR: /srv/corpus
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_JSON: ${LOG_JSON:-1}
      UV_LINK_MODE: copy
    entrypoint: ["/bin/sh", "-lc"]
    command: ["uv run --python 3.13 python server.py"]
    healthcheck:
      test: ["CMD", "sh", "-lc", "wget -qO- http://localhost:3000 || nc -z localhost 3000"]
      interval: 5s
      timeout: 3s
      retries: 20
    ports:
      - "3001:3000"

  mcp-sql:
    container_name: mcp-sql
    build:
      context: ./mcp/sql
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    image: chatbot-basic-mcp-sql:local
    working_dir: /srv
    environment:
      DATABASE_URL: postgresql+psycopg://chatbot:chatbot@postgres:5432/chatbot
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_JSON: ${LOG_JSON:-1}
      UV_LINK_MODE: copy
    entrypoint: ["/bin/sh", "-lc"]
    command: ["uv run --python 3.13 python server.py"]
    healthcheck:
      test: ["CMD", "sh", "-lc", "wget -qO- http://localhost:3000 || nc -z localhost 3000"]
      interval: 5s
      timeout: 3s
      retries: 20
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3002:3000"

  frontend:
    container_name: frontend
    build:
      context: ./frontend-react
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    image: chatbot-basic-frontend:local
    environment:
      NEXT_PUBLIC_FASTAPI_EXTERNAL_BASE: http://host.docker.internal:8000
      # Expose default locales to the React app (optional)
      # NEXT_PUBLIC_DEFAULT_LOCALE: ${DEFAULT_LOCALE:-en}
      # NEXT_PUBLIC_SUPPORTED_LOCALES: ${SUPPORTED_LOCALES:-en,fr,es}
    depends_on:
      app:
        condition: service_started
    ports:
      - "3000:3000"


volumes:
  pgdata:
models:
  chat_local:
    model: hf.co/microsoft/Phi-3-mini-4k-instruct-gguf
  embed_local:
    model: hf.co/nomic-ai/nomic-embed-text-v1.5-GGUF

